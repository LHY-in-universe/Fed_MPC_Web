#!/bin/bash

# Fed_MPC_Web ÊâìÂåÖÈÉ®ÁΩ≤ËÑöÊú¨
# Ê≠§ËÑöÊú¨Â∞ÜÈ°πÁõÆÊâìÂåÖ‰∏∫ÂèØÂú®ÊúçÂä°Âô®‰∏äÁõ¥Êé•ÈÉ®ÁΩ≤ÁöÑÂéãÁº©ÂåÖ

set -e  # ÈÅáÂà∞ÈîôËØØÁ´ãÂç≥ÈÄÄÂá∫

# È¢úËâ≤ËæìÂá∫
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ËæìÂá∫ÂáΩÊï∞
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Ëé∑ÂèñËÑöÊú¨ÁõÆÂΩï
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
DEPLOY_DIR="$SCRIPT_DIR"

# ÈÖçÁΩÆÂèòÈáè
PACKAGE_NAME="fed_mpc_web_deployment"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
PACKAGE_VERSION="${PACKAGE_NAME}_${TIMESTAMP}"
BUILD_DIR="/tmp/${PACKAGE_VERSION}"

print_status "ÂºÄÂßãÊâìÂåÖ Fed_MPC_Web È°πÁõÆ..."

# 1. ÂàõÂª∫ÊûÑÂª∫ÁõÆÂΩï
print_status "ÂàõÂª∫ÊûÑÂª∫ÁõÆÂΩï: $BUILD_DIR"
rm -rf "$BUILD_DIR"
mkdir -p "$BUILD_DIR"

# 2. Â§çÂà∂Ê†∏ÂøÉÈ°πÁõÆÊñá‰ª∂
print_status "Â§çÂà∂È°πÁõÆÊñá‰ª∂..."

# Â§çÂà∂ÂêéÁ´Ø‰ª£Á†Å
cp -r "$PROJECT_ROOT/backend" "$BUILD_DIR/"
print_status "‚úì Â§çÂà∂ÂêéÁ´Ø‰ª£Á†Å"

# Â§çÂà∂ÂâçÁ´Ø‰ª£Á†Å
cp -r "$PROJECT_ROOT/frontend" "$BUILD_DIR/"
print_status "‚úì Â§çÂà∂ÂâçÁ´Ø‰ª£Á†Å"

# Â§çÂà∂Êï∞ÊçÆÂ∫ìËÑöÊú¨
cp -r "$PROJECT_ROOT/database" "$BUILD_DIR/"
print_status "‚úì Â§çÂà∂Êï∞ÊçÆÂ∫ìËÑöÊú¨"

# Â§çÂà∂ÈÉ®ÁΩ≤ÈÖçÁΩÆ
cp -r "$PROJECT_ROOT/deploy" "$BUILD_DIR/"
print_status "‚úì Â§çÂà∂ÈÉ®ÁΩ≤ÈÖçÁΩÆ"

# Â§çÂà∂DockerÈÖçÁΩÆ
cp "$PROJECT_ROOT/docker-compose.yml" "$BUILD_DIR/"
cp "$PROJECT_ROOT/Dockerfile" "$BUILD_DIR/"
print_status "‚úì Â§çÂà∂DockerÈÖçÁΩÆ"

# Â§çÂà∂ÁéØÂ¢ÉÈÖçÁΩÆÊ®°Êùø
cp "$PROJECT_ROOT/.env.example" "$BUILD_DIR/"
print_status "‚úì Â§çÂà∂ÁéØÂ¢ÉÈÖçÁΩÆÊ®°Êùø"

# Â§çÂà∂È°πÁõÆÊñáÊ°£
cp "$PROJECT_ROOT/README.md" "$BUILD_DIR/" 2>/dev/null || true
print_status "‚úì Â§çÂà∂È°πÁõÆÊñáÊ°£"

# Â§çÂà∂requirementsÊñá‰ª∂
cp "$PROJECT_ROOT/requirements.txt" "$BUILD_DIR/" 2>/dev/null || true
cp "$PROJECT_ROOT/backend/requirements.txt" "$BUILD_DIR/" 2>/dev/null || true
print_status "‚úì Â§çÂà∂‰æùËµñÊñá‰ª∂"

# 3. Ê∏ÖÁêÜ‰∏çÂøÖË¶ÅÁöÑÊñá‰ª∂
print_status "Ê∏ÖÁêÜ‰∏çÂøÖË¶ÅÁöÑÊñá‰ª∂..."

# Âà†Èô§ÁºìÂ≠òÊñá‰ª∂
find "$BUILD_DIR" -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
find "$BUILD_DIR" -name "*.pyc" -delete 2>/dev/null || true
find "$BUILD_DIR" -name ".DS_Store" -delete 2>/dev/null || true

# Âà†Èô§ÂºÄÂèëÊñá‰ª∂
rm -rf "$BUILD_DIR/backend/venv" 2>/dev/null || true
rm -rf "$BUILD_DIR/venv" 2>/dev/null || true
rm -rf "$BUILD_DIR/.git" 2>/dev/null || true
rm -rf "$BUILD_DIR/node_modules" 2>/dev/null || true
rm -rf "$BUILD_DIR/backend/instance" 2>/dev/null || true

print_status "‚úì Ê∏ÖÁêÜÂÆåÊàê"

# 4. ÂàõÂª∫Âø´ÈÄüÈÉ®ÁΩ≤ËÑöÊú¨
print_status "ÂàõÂª∫Âø´ÈÄüÈÉ®ÁΩ≤ËÑöÊú¨..."

cat > "$BUILD_DIR/quick-deploy.sh" << 'DEPLOY_SCRIPT'
#!/bin/bash

# Fed_MPC_Web Âø´ÈÄüÈÉ®ÁΩ≤ËÑöÊú¨
# Âú®ÁõÆÊ†áÊúçÂä°Âô®‰∏äÊâßË°åÊ≠§ËÑöÊú¨ÂÆåÊàêÈÉ®ÁΩ≤

set -e

# È¢úËâ≤ËæìÂá∫
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

print_status "ÂºÄÂßãÈÉ®ÁΩ≤ Fed_MPC_Web..."

# Ê£ÄÊü•Docker
if ! command -v docker &> /dev/null; then
    print_error "Docker Êú™ÂÆâË£ÖÔºåËØ∑ÂÖàÂÆâË£Ö Docker"
    print_status "ÂÆâË£ÖÂëΩ‰ª§: curl -fsSL https://get.docker.com | sh"
    exit 1
fi

if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    print_error "Docker Compose Êú™ÂÆâË£ÖÔºåËØ∑ÂÖàÂÆâË£Ö Docker Compose"
    exit 1
fi

# Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáèÊñá‰ª∂
if [ ! -f ".env" ]; then
    print_warning ".env Êñá‰ª∂‰∏çÂ≠òÂú®Ôºå‰ªéÊ®°ÊùøÂàõÂª∫..."
    cp .env.example .env
    print_warning "ËØ∑ÁºñËæë .env Êñá‰ª∂ÔºåÈÖçÁΩÆÂøÖË¶ÅÁöÑÁéØÂ¢ÉÂèòÈáèÔºö"
    print_warning "  - SECRET_KEY (Â∫îÁî®ÂØÜÈí•)"
    print_warning "  - JWT_SECRET_KEY (JWTÂØÜÈí•)" 
    print_warning "  - MYSQL_ROOT_PASSWORD (MySQL rootÂØÜÁ†Å)"
    print_warning "  - MYSQL_PASSWORD (MySQLÁî®Êà∑ÂØÜÁ†Å)"
    print_warning "  - CORS_ORIGINS (ÂÖÅËÆ∏ÁöÑÂüüÂêç)"
    echo
    read -p "ÈÖçÁΩÆÂÆåÊàêÂêéÊåâ Enter ÁªßÁª≠ÈÉ®ÁΩ≤..." -r
fi

# ÂàõÂª∫ÂøÖË¶ÅÁöÑÁõÆÂΩï
print_status "ÂàõÂª∫ÂøÖË¶ÅÁöÑÁõÆÂΩï..."
mkdir -p logs uploads backups
sudo chown -R $USER:$USER . 2>/dev/null || chown -R $USER:$USER .

# ÊãâÂèñÊúÄÊñ∞ÈïúÂÉè
print_status "ÊãâÂèñDockerÈïúÂÉè..."
docker-compose pull mysql redis || print_warning "ÈÉ®ÂàÜÈïúÂÉèÊãâÂèñÂ§±Ë¥•ÔºåÂ∞Ü‰ΩøÁî®Êú¨Âú∞ÁºìÂ≠ò"

# ÊûÑÂª∫Â∫îÁî®ÈïúÂÉè
print_status "ÊûÑÂª∫Â∫îÁî®ÈïúÂÉè..."
docker-compose build app

# ÂêØÂä®Êï∞ÊçÆÂ∫ìÊúçÂä°
print_status "ÂêØÂä®Êï∞ÊçÆÂ∫ìÊúçÂä°..."
docker-compose up -d mysql redis

# Á≠âÂæÖÊï∞ÊçÆÂ∫ìÂêØÂä®
print_status "Á≠âÂæÖÊï∞ÊçÆÂ∫ìÂêØÂä®..."
sleep 15

# ÂêØÂä®Â∫îÁî®ÊúçÂä°
print_status "ÂêØÂä®Â∫îÁî®ÊúçÂä°..."
docker-compose up -d app

# Á≠âÂæÖÂ∫îÁî®ÂêØÂä®
print_status "Á≠âÂæÖÂ∫îÁî®ÂêØÂä®..."
sleep 10

# Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ
print_status "Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ..."
docker-compose ps

# ÂÅ•Â∫∑Ê£ÄÊü•
print_status "ÊâßË°åÂÅ•Â∫∑Ê£ÄÊü•..."
if curl -f http://localhost/api/health &>/dev/null || curl -f http://localhost:80/api/health &>/dev/null; then
    print_success "‚úì Â∫îÁî®ÂÅ•Â∫∑Ê£ÄÊü•ÈÄöËøá"
else
    print_warning "ÂÅ•Â∫∑Ê£ÄÊü•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êó•ÂøóÔºö"
    print_status "docker-compose logs app"
fi

print_success "ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ"
print_status "Â∫îÁî®Â∑≤ÂêØÂä®ÔºåËØ∑ËÆøÈóÆÔºö"
print_status "  - ‰∏ªÈ°µ: http://$(hostname -I | awk '{print $1}')/"
print_status "  - ÂÅ•Â∫∑Ê£ÄÊü•: http://$(hostname -I | awk '{print $1}')/api/health"
print_status ""
print_status "Â∏∏Áî®ÁÆ°ÁêÜÂëΩ‰ª§Ôºö"
print_status "  - Êü•ÁúãÊó•Âøó: docker-compose logs -f app"
print_status "  - ÈáçÂêØÊúçÂä°: docker-compose restart app"
print_status "  - ÂÅúÊ≠¢ÊúçÂä°: docker-compose down"
print_status "  - Êõ¥Êñ∞ÊúçÂä°: docker-compose pull && docker-compose up -d"
DEPLOY_SCRIPT

chmod +x "$BUILD_DIR/quick-deploy.sh"
print_status "‚úì Âø´ÈÄüÈÉ®ÁΩ≤ËÑöÊú¨ÂàõÂª∫ÂÆåÊàê"

# 5. ÂàõÂª∫ÂÆâË£ÖËØ¥Êòé
print_status "ÂàõÂª∫ÂÆâË£ÖËØ¥Êòé..."

cat > "$BUILD_DIR/DEPLOYMENT_GUIDE.md" << 'GUIDE_EOF'
# Fed_MPC_Web ÈÉ®ÁΩ≤ÊåáÂçó

## üöÄ Âø´ÈÄüÈÉ®ÁΩ≤

1. **Ëß£ÂéãÈÉ®ÁΩ≤ÂåÖ**
   ```bash
   tar -xzf fed_mpc_web_deployment_*.tar.gz
   cd fed_mpc_web_deployment_*
   ```

2. **ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáè**
   ```bash
   # Â§çÂà∂ÁéØÂ¢ÉÂèòÈáèÊ®°Êùø
   cp .env.example .env
   
   # ÁºñËæëÈÖçÁΩÆÊñá‰ª∂ÔºàÂøÖÈ°ª‰øÆÊîπÁöÑÈÖçÁΩÆÈ°πÂ∑≤Ê†áÊ≥®Ôºâ
   nano .env
   ```

3. **ÊâßË°åÂø´ÈÄüÈÉ®ÁΩ≤**
   ```bash
   # ÁªôËÑöÊú¨ÊâßË°åÊùÉÈôê
   chmod +x quick-deploy.sh
   
   # ÊâßË°åÈÉ®ÁΩ≤
   ./quick-deploy.sh
   ```

## üîß ÊâãÂä®ÈÉ®ÁΩ≤Ê≠•È™§

### 1. Á≥ªÁªüË¶ÅÊ±Ç
- Ubuntu 20.04+ / CentOS 8+ / RHEL 8+
- Docker 20.10+
- Docker Compose 2.0+
- 2GB+ RAM
- 10GB+ ÂèØÁî®Á£ÅÁõòÁ©∫Èó¥

### 2. ÂÆâË£ÖDocker
```bash
# Ubuntu/Debian
curl -fsSL https://get.docker.com | sh
sudo usermod -aG docker $USER

# CentOS/RHEL
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install docker-ce docker-ce-cli containerd.io
sudo systemctl start docker
sudo systemctl enable docker
```

### 3. ÂÆâË£ÖDocker Compose
```bash
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
```

### 4. ÈÖçÁΩÆÂ∫îÁî®
```bash
# ÁºñËæëÁéØÂ¢ÉÂèòÈáè
cp .env.example .env
nano .env

# ÂøÖÈ°ªÈÖçÁΩÆÁöÑÂèòÈáèÔºö
# - SECRET_KEY: Â∫îÁî®ÂØÜÈí•
# - JWT_SECRET_KEY: JWTÂØÜÈí•  
# - MYSQL_ROOT_PASSWORD: MySQL rootÂØÜÁ†Å
# - MYSQL_PASSWORD: MySQLÁî®Êà∑ÂØÜÁ†Å
# - CORS_ORIGINS: ÂÖÅËÆ∏ÁöÑÂüüÂêç
```

### 5. ÂêØÂä®ÊúçÂä°
```bash
# ÂêØÂä®ÊâÄÊúâÊúçÂä°
docker-compose up -d

# Êü•ÁúãÊúçÂä°Áä∂ÊÄÅ
docker-compose ps

# Êü•ÁúãÊó•Âøó
docker-compose logs -f app
```

## üîç È™åËØÅÈÉ®ÁΩ≤

1. **Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ**
   ```bash
   docker-compose ps
   ```

2. **ÂÅ•Â∫∑Ê£ÄÊü•**
   ```bash
   curl http://localhost/api/health
   ```

3. **ËÆøÈóÆÂ∫îÁî®**
   - ‰∏ªÈ°µ: http://your-server-ip/
   - APIÊñáÊ°£: http://your-server-ip/api/docs

## üìä ÁõëÊéßÂíåÁÆ°ÁêÜ

### Êü•ÁúãÊó•Âøó
```bash
# Â∫îÁî®Êó•Âøó
docker-compose logs -f app

# Êï∞ÊçÆÂ∫ìÊó•Âøó
docker-compose logs -f mysql

# ÊâÄÊúâÊúçÂä°Êó•Âøó
docker-compose logs -f
```

### ÊúçÂä°ÁÆ°ÁêÜ
```bash
# ÈáçÂêØÊúçÂä°
docker-compose restart app

# ÂÅúÊ≠¢ÊâÄÊúâÊúçÂä°
docker-compose down

# Êõ¥Êñ∞ÊúçÂä°
docker-compose pull
docker-compose up -d
```

### Êï∞ÊçÆÂ§á‰ªΩ
```bash
# Â§á‰ªΩÊï∞ÊçÆÂ∫ì
docker-compose exec mysql mysqldump -u fed_mpc_user -p fed_mpc_web > backup_$(date +%Y%m%d).sql

# ÊÅ¢Â§çÊï∞ÊçÆÂ∫ì
docker-compose exec -T mysql mysql -u fed_mpc_user -p fed_mpc_web < backup_20240101.sql
```

## üîí SSLÈÖçÁΩÆ (ÂèØÈÄâ)

‰ΩøÁî®Let's EncryptÂÖçË¥πËØÅ‰π¶Ôºö

```bash
# ÂÆâË£Öcertbot
sudo apt install certbot python3-certbot-nginx

# Ëé∑ÂèñËØÅ‰π¶
sudo certbot --nginx -d your-domain.com

# Ëá™Âä®Áª≠Êúü
echo "0 12 * * * /usr/bin/certbot renew --quiet" | sudo crontab -
```

## üö® ÊïÖÈöúÊéíÈô§

### Â∏∏ËßÅÈóÆÈ¢ò

1. **ÂÆπÂô®ÂêØÂä®Â§±Ë¥•**
   - Ê£ÄÊü•DockerÊúçÂä°: `sudo systemctl status docker`
   - Êü•ÁúãÂÆπÂô®Êó•Âøó: `docker-compose logs app`

2. **Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•**
   - Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáè: `docker-compose exec app env | grep MYSQL`
   - Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÁä∂ÊÄÅ: `docker-compose exec mysql mysqladmin ping`

3. **Á´ØÂè£Âç†Áî®**
   - Ê£ÄÊü•Á´ØÂè£Âç†Áî®: `sudo netstat -tulpn | grep :80`
   - ‰øÆÊîπdocker-compose.yml‰∏≠ÁöÑÁ´ØÂè£Êò†Â∞Ñ

### ËÅîÁ≥ªÊîØÊåÅ
- È°πÁõÆÂú∞ÂùÄ: [GitHub Repository]
- ÈóÆÈ¢òÂèçÈ¶à: [Issues URL]
GUIDE_EOF

print_status "‚úì ÂÆâË£ÖËØ¥ÊòéÂàõÂª∫ÂÆåÊàê"

# 6. ÂàõÂª∫Á≥ªÁªüÊúçÂä°Êñá‰ª∂
print_status "ÂàõÂª∫Á≥ªÁªüÊúçÂä°Êñá‰ª∂..."

cat > "$BUILD_DIR/deploy/fed-mpc-web.service" << 'SERVICE_EOF'
[Unit]
Description=Fed_MPC_Web Application
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/opt/fed_mpc_web
ExecStart=/usr/local/bin/docker-compose up -d
ExecStop=/usr/local/bin/docker-compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
SERVICE_EOF

print_status "‚úì Á≥ªÁªüÊúçÂä°Êñá‰ª∂ÂàõÂª∫ÂÆåÊàê"

# 7. ÂàõÂª∫ÁâàÊú¨‰ø°ÊÅØÊñá‰ª∂
cat > "$BUILD_DIR/VERSION" << VERSION_EOF
Fed_MPC_Web Deployment Package
==============================

Package Version: $PACKAGE_VERSION
Build Date: $(date)
Build Host: $(hostname)

Contents:
- Backend Application
- Frontend Web Interface  
- Database Scripts
- Docker Configuration
- Deployment Scripts
- Configuration Templates

For deployment instructions, see DEPLOYMENT_GUIDE.md
VERSION_EOF

# 8. ÂàõÂª∫ÂéãÁº©ÂåÖ
print_status "ÂàõÂª∫ÈÉ®ÁΩ≤ÂéãÁº©ÂåÖ..."
cd "/tmp"
tar -czf "${PACKAGE_VERSION}.tar.gz" "${PACKAGE_VERSION}/"

# ÁßªÂä®Âà∞È°πÁõÆÁõÆÂΩï
mv "${PACKAGE_VERSION}.tar.gz" "$PROJECT_ROOT/"
print_success "‚úì ÂéãÁº©ÂåÖÂàõÂª∫ÂÆåÊàê: $PROJECT_ROOT/${PACKAGE_VERSION}.tar.gz"

# 9. Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
print_status "Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂..."
rm -rf "$BUILD_DIR"
print_status "‚úì ‰∏¥Êó∂Êñá‰ª∂Ê∏ÖÁêÜÂÆåÊàê"

# 10. ÊòæÁ§∫ÈÉ®ÁΩ≤ÂåÖ‰ø°ÊÅØ
print_success "ÊâìÂåÖÂÆåÊàêÔºÅ"
echo
print_status "ÈÉ®ÁΩ≤ÂåÖ‰ø°ÊÅØÔºö"
print_status "  - Êñá‰ª∂Âêç: ${PACKAGE_VERSION}.tar.gz"
print_status "  - ‰ΩçÁΩÆ: $PROJECT_ROOT/${PACKAGE_VERSION}.tar.gz"
print_status "  - Â§ßÂ∞è: $(du -h "$PROJECT_ROOT/${PACKAGE_VERSION}.tar.gz" | cut -f1)"
echo
print_status "ÈÉ®ÁΩ≤Ê≠•È™§Ôºö"
print_status "  1. Â∞ÜÂéãÁº©ÂåÖ‰∏ä‰º†Âà∞ÁõÆÊ†áÊúçÂä°Âô®"
print_status "  2. Ëß£Âéã: tar -xzf ${PACKAGE_VERSION}.tar.gz"
print_status "  3. ËøõÂÖ•ÁõÆÂΩï: cd ${PACKAGE_VERSION}/"
print_status "  4. ÈÖçÁΩÆÁéØÂ¢É: cp .env.example .env && nano .env"
print_status "  5. ÊâßË°åÈÉ®ÁΩ≤: ./quick-deploy.sh"
echo
print_status "ËØ¶ÁªÜÈÉ®ÁΩ≤ËØ¥ÊòéËØ∑Êü•ÁúãËß£ÂéãÂêéÁöÑ DEPLOYMENT_GUIDE.md Êñá‰ª∂"
print_success "üéâ ÊâìÂåÖÂÆåÊàêÔºÅ"
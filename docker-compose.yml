# Fed_MPC_Web Docker Compose配置
version: '3.8'

services:
  # 数据库服务
  mysql:
    image: mysql:8.0
    container_name: fed_mpc_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: fed_mpc_web
      MYSQL_USER: fed_mpc_user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - fed_mpc_network
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_connections=200
      --innodb-buffer-pool-size=256M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "fed_mpc_user", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存服务（可选）
  redis:
    image: redis:7-alpine
    container_name: fed_mpc_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fed_mpc_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Web应用服务
  app:
    build: .
    container_name: fed_mpc_app
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY}
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: fed_mpc_user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DB: fed_mpc_web
      REDIS_URL: redis://redis:6379/0
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fed_mpc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: fed_mpc_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - fed_mpc_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    profiles: ["monitoring"]

  # 图形化监控（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: fed_mpc_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - fed_mpc_network
    profiles: ["monitoring"]

networks:
  fed_mpc_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local